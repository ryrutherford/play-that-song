{"version":3,"sources":["components/songRequests/RequestSong.js","img/spotify.png","store/actions/songActions.js","components/layout/SignedInLinks.js","store/actions/authActions.js","components/layout/SignedOutLinks.js","components/layout/Navbar.js","components/dashboard/About.js","components/songRequests/SongDetails.js","components/auth/SignIn.js","components/auth/SignUp.js","components/dashboard/Notifications.js","components/sessions/Sessions.js","store/actions/sessionActions.js","components/songRequests/SongRequestSummary.js","components/songRequests/SongRequestList.js","components/sessions/ActiveSession.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/songReducer.js","store/reducers/sessionReducer.js","store/reducers/rootReducer.js","config/fbConfig.js","index.js"],"names":["RequestSong","state","songs","isValidURL","props","songRequestSessions","sessionID","sessionExists","isLoaded","i","session","parseInt","handleChange","e","setState","target","id","value","request","require","authOptions","url","headers","Buffer","client_id","toString","form","grant_type","json","post","error","response","body","statusCode","token","access_token","options","encodeURIComponent","query","get","tracks","items","handleClick","requestSong","deleteNotifications","preventDefault","songID","parentNode","document","getElementById","filter","song","history","this","auth","reqError","uid","to","songList","length","map","className","key","src","album","images","alt","SPOTIFY","name","artists","artist","join","rel","title","href","external_urls","spotify","onClick","type","onChange","placeholder","clearError","Component","compose","connect","ownProps","match","params","session_id","firebase","firestore","data","dispatch","firestoreConnect","collection","module","exports","getState","getFirebase","getFirestore","numRequests","docID","requestorID","requestors","alreadyRequested","songIndex","songRequests","where","then","querySnapshot","forEach","doc","songRequest","index","includes","push","externalURL","albumIMGURL","update","catch","err","orderBy","numNotifs","size","delete","undoRequest","userID","splice","createSongRequestFromDashboard","signOut","profile","initials","SignedOutLinks","links","About","SongDetails","SignIn","email","password","handleSubmit","signIn","authError","onSubmit","htmlFor","credentials","signInWithEmailAndPassword","SignUp","firstName","lastName","signUp","newUser","createUserWithEmailAndPassword","user","set","Notifications","notifications","item","replace","moment","time","toDate","fromNow","Sessions","joinSessionError","path","getSessions","sessionArr","creatorID","joinSession","elements","newSession","createSession","Math","floor","random","tryAgain","deleteSession","ordered","add","limit","SongRequestSummary","handleClickUndo","handleClickRequest","SongRequestList","slice","sort","a","b","ActiveSession","returnSongRequests","App","exact","component","Boolean","window","location","hostname","initState","authReducer","action","message","songReducer","sessError","sessionIDs","sessionReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","fbConfig","rrfProps","config","userProfile","useFirestoreForProfile","enableRedirectHandling","resetBeforeLogin","createFirestoreInstance","ReactDOM","render","children","useSelector","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.26080fb8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport SPOTIFY from 'C:/Users/Ry Rutherford/Documents/JavaScript Projects/Dev/play-that-song/src/img/spotify.png';\r\nimport {requestSong, clearError, deleteNotifications} from '../../store/actions/songActions';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {firestoreConnect, isLoaded} from 'react-redux-firebase';\r\nimport {compose} from 'redux';\r\n\r\nclass RequestSong extends Component {\r\n  state = {\r\n    songs: []\r\n  }\r\n\r\n  isValidURL = () => {\r\n    const {songRequestSessions, sessionID} = this.props;\r\n    let sessionExists = false;\r\n    if(isLoaded(songRequestSessions)){\r\n      for(let i in songRequestSessions){\r\n        if(songRequestSessions[i].session.sessionID === parseInt(sessionID)){\r\n          sessionExists = true;\r\n          break;\r\n        }\r\n      }\r\n      if(!sessionExists){\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value,\r\n    });\r\n    let request = require('request'); // \"Request\" library\r\n\r\n    let client_id = process.env.REACT_APP_SPOTIFY_CLIENT_ID; // Your client id\r\n    let client_secret = process.env.REACT_APP_SPOTIFY_CLIENT_SECRET; // Your secret\r\n    // your application requests authorization\r\n    let authOptions = {\r\n      url: 'https://accounts.spotify.com/api/token',\r\n      headers: {\r\n        'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\r\n      },\r\n      form: {\r\n        grant_type: 'client_credentials'\r\n      },\r\n      json: true\r\n    };\r\n    if(e.target.value){\r\n      request.post(authOptions, (error, response, body) => {\r\n        if (!error && response.statusCode === 200) {\r\n\r\n          // use the access token to access the Spotify Web API\r\n          var token = body.access_token;\r\n          var options = {\r\n            url: 'https://api.spotify.com/v1/search?limit=5&q=' + encodeURIComponent(this.state.query) + '&type=track',\r\n            headers: {\r\n              'Authorization': 'Bearer ' + token\r\n            },\r\n            json: true\r\n          };\r\n          request.get(options, (error, response, body) => {\r\n            this.setState({\r\n              songs: body.tracks.items\r\n            })\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    const {requestSong, deleteNotifications, sessionID} = this.props;\r\n    e.preventDefault();\r\n    const songID = e.target.parentNode.parentNode.parentNode.id; //songID can be used to add a track to the request area\r\n    document.getElementById('query').value='';\r\n    //selecting the song that was requested by the user based on its ID\r\n    const songSelected = this.state.songs.filter(song => song.id === songID);\r\n    requestSong({songs: songSelected}, this.props.history, sessionID);\r\n    deleteNotifications();\r\n    this.setState({\r\n      songs: []\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {auth, reqError, songRequestSessions} = this.props;\r\n    if (!auth.uid){\r\n      return <Redirect to=\"/signin\"/>\r\n    }\r\n    if(isLoaded(songRequestSessions) && this.isValidURL() === false){\r\n      return <Redirect to='/sessions'/>\r\n    }\r\n    const songs = this.state.songs;\r\n    const songList = songs.length ? (\r\n      songs.map((song) => {\r\n        return (\r\n          <div className=\"create-requests card\" id={song.id} key={song.id}>\r\n            <div className=\"song-with-album\"><img src={song.album.images[0].url} alt=\"Album Cover\"/></div>\r\n            <div className=\"spotify\"><img src={SPOTIFY} alt=\"Spotify Logo\"/></div>\r\n            <div className=\"card-content\">\r\n              <span className=\"card-title green-text\">{song.name}</span>\r\n              <p className=\"black-text\">{\"Song • \" + song.artists.map(artist => artist.name).join(\", \")}</p>\r\n              <p className=\"green-text\">\r\n                <a target=\"_blank\" rel=\"noreferrer noopener\" title=\"Play on Spotify\" href={song.external_urls.spotify}>Play On Spotify</a>\r\n              </p>\r\n              <div className=\"input-field\">\r\n                <button onClick={this.handleClick} className=\"btn green lighten-1 z-depth-0\">Request Song</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n      })\r\n    ) : (null);\r\n    return (\r\n      <div className=\"container\">\r\n        <form className=\"white\">\r\n          <h5 className=\"black-text text-darken-3\">Search Songs</h5>\r\n          <div className=\"input-field green-text\">\r\n            <input type=\"text\" id=\"query\" onChange={this.handleChange} placeholder=\"Search by song name to display results\"/>\r\n          </div>\r\n          {songList}\r\n        </form>\r\n        {reqError ? \r\n        (<div className=\"msg-container\">\r\n          <div className=\"msg msg-error z-depth-3 scale-transition center\">\r\n            <p>{reqError}</p>\r\n            <button onClick={this.props.clearError} className=\"btn white red-text lighten-1 z-depth-0\">OK</button>\r\n          </div>\r\n         </div>) : (null)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  let sessionID = ownProps.match.params.session_id;\r\n  return {\r\n    auth: state.firebase.auth,\r\n    reqError: state.song.reqError,\r\n    songRequestSessions: state.firestore.data.songRequestSessions,\r\n    sessionID\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    requestSong: (songs, history, sessionID) => {\r\n      dispatch(requestSong(songs, history, sessionID));\r\n    },\r\n    clearError: () => {\r\n      dispatch(clearError());\r\n    },\r\n    deleteNotifications: () => {\r\n      dispatch(deleteNotifications());\r\n    }\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  firestoreConnect([{collection: 'songRequestSessions'}]))\r\n  (RequestSong)\r\n","module.exports = __webpack_public_path__ + \"static/media/spotify.a162f1ee.png\";","export const requestSong = (songs, history, sessionID) => {\r\n  return (dispatch, getState, {getFirebase, getFirestore}) => {\r\n    /*\r\n      firestore: a constant that is connected to the firestore database\r\n      song: a constant that represents the song that was requested by a user\r\n      numRequests: a variable that represents how many times the song has been requested\r\n      docID: the id of the document that contains the requested song. It is initially null as the song may not have been requested already\r\n      requestorID: the id of the user that has just requested the song\r\n      requestors: an array of all the users that have requested this song\r\n      alreadyRequested: a boolean that indicates whether the user has already requested this song\r\n    */\r\n\r\n   const firestore = getFirestore();\r\n   const song = songs.songs[0];\r\n   let numRequests = 0;\r\n   let docID = null;\r\n   const requestorID = getState().firebase.auth.uid;\r\n   let requestors = [];\r\n   let alreadyRequested = false;\r\n   let songIndex = null;\r\n   let songRequests = null; //used to update the database with the new/updated sr\r\n\r\n\r\n   //the first action is to get a document in the collection that has the same songID as the song that was requested\r\n   firestore.collection('songRequestSessions').where(\"session.sessionID\", \"==\", parseInt(sessionID)).get()\r\n     .then((querySnapshot) => {\r\n       querySnapshot.forEach((doc) => {\r\n         // doc.data() is never undefined for query doc snapshots\r\n         let session = doc.data().session;\r\n         docID = doc.id;\r\n         //iterating through all the songRequests in the session\r\n         songRequests = session.songRequests;\r\n         songRequests.forEach((songRequest, index) => {\r\n          if(songRequest.songID === song.id){\r\n            songIndex = index; //used to identify which index in the songRequests array the song is\r\n            numRequests = songRequest.numRequests + 1;\r\n            requestors = songRequest.requestors;\r\n            if (requestors.includes(requestorID)) alreadyRequested = true;\r\n          }\r\n         })\r\n       });\r\n     })\r\n     //the next step is to either add a new songRequest to the session.songRequests array (song hasn't been requested yet) or update the numRequests of the existing songRequest\r\n     .then(() => {\r\n       //if the numRequests is 0 then the song hasn't been requested before, we must add a new song to the array\r\n       if (numRequests === 0){\r\n        numRequests = 1;\r\n        //pushing the new song request to the songRequests array that is a copy of the songRequests in the session doc in firestore\r\n        songRequests.push({\r\n          title: song.name,\r\n          artists: song.artists.map(artist => artist.name),\r\n          externalURL: song.external_urls.spotify,\r\n          songID: song.id,\r\n          requestors: [...requestors, requestorID],\r\n          albumIMGURL: song.album.images[0].url,\r\n          numRequests\r\n        })\r\n        //updating the collection to reflect the change to the songRequests\r\n        firestore.collection('songRequestSessions').doc(docID).update({\r\n          \"session.songRequests\": songRequests\r\n        })\r\n        .then(() => {\r\n           history.push(\"/activeSession/\" + sessionID);\r\n           dispatch({type: 'CREATE_SONG_REQUEST', songs});\r\n         }).catch((error) => {\r\n           dispatch({type: 'CREATE_SONG_REQUEST_ERROR', error});\r\n         });\r\n       }\r\n       //if the numRequests is > 0 then the song has already been requested\r\n       //and we must update the doc to reflect the new request as long as the user hasn't already requested the song\r\n       else if (alreadyRequested === false){\r\n         songRequests[songIndex].numRequests = numRequests;\r\n         songRequests[songIndex].requestors = [...requestors, requestorID];\r\n         firestore.collection('songRequestSessions').doc(docID).update({\r\n           \"session.songRequests\": songRequests\r\n         }).then(() => {\r\n           history.push(\"/activeSession/\" + sessionID);\r\n           dispatch({type: 'UPDATE_SONG_REQUEST', songs});\r\n         }).catch((error) => {\r\n           dispatch({type: 'UPDATE_SONG_REQUEST_ERROR', error});\r\n         });\r\n       }\r\n       else {\r\n         //we dispatch an action indicating the the song has already been requested\r\n         let err = 'You have already requested this song.'\r\n         dispatch({type: 'ALREADY_REQUESTED', err});\r\n       }\r\n     })\r\n   .catch((error) => {\r\n     dispatch({type: 'SONG_REQUEST_ERROR', error});\r\n   })\r\n   .catch((error) => {\r\n     dispatch({type: 'GET_DOCUMENT_ERROR', error});\r\n   })\r\n  }\r\n}\r\n\r\nexport const clearError = () => {\r\n  return (dispatch, getState) => {\r\n    dispatch({type: 'CLEAR_ERROR'});\r\n  }\r\n}\r\n\r\nexport const deleteNotifications = () => {\r\n  return (dispatch, getState, {getFirestore}) => {\r\n    \r\n    const firestore = getFirestore();\r\n\r\n    //the notifications will be retrieved ordered in ascending order by data created\r\n    firestore.collection('notifications').orderBy('time').get()\r\n    .then((querySnapshot) => {\r\n      let numNotifs = querySnapshot.size;\r\n      let i = 0; //used to check if any notifs were deleted and as a counter for deleting notifs\r\n\r\n      //if there are more than 500 notifications in the notifications collection we must:\r\n      //delete the oldest notifications until only 5 remain\r\n      if(numNotifs >= 500){\r\n        querySnapshot.forEach((doc) => {\r\n          if(i < numNotifs - 5){\r\n            //deleting the documents\r\n            firestore.collection('notifications').doc(doc.id).delete()\r\n              .then(() => {\r\n                dispatch({type: 'DELETE_NOTIF'});\r\n              })\r\n              .catch((error) => {\r\n                dispatch({type:'DELETE_NOTIF_ERROR', error});\r\n              })\r\n            i++;\r\n          }\r\n        })\r\n      }\r\n      if(i !== 0) dispatch({type: 'DELETE_NOTIF'});\r\n    })\r\n    .catch((error) => {\r\n      dispatch({type: 'DELETE_NOTIF_ERROR', error})\r\n    })\r\n  }\r\n}\r\n\r\nexport const undoRequest = (songID, userID, sessionID) => {\r\n  return (dispatch, getState, {getFirestore}) => {\r\n    //the database\r\n    const firestore = getFirestore();\r\n    let numRequests = 0;\r\n    let docID = null;\r\n    let requestors = [];\r\n    let songIndex = null;\r\n    let songRequests = null;\r\n\r\n    firestore.collection('songRequestSessions').where(\"session.sessionID\", \"==\", parseInt(sessionID)).get()\r\n      .then((querySnapshot) => {\r\n        querySnapshot.forEach((doc) => {\r\n          let session = doc.data().session;\r\n          docID = doc.id;\r\n          //iterating through all the songRequests in the session\r\n          songRequests = session.songRequests;\r\n          songRequests.forEach((songRequest, index) => {\r\n          if(songRequest.songID === songID){\r\n            songIndex = index; //used to identify which index in the songRequests array the song is\r\n            numRequests = songRequest.numRequests;\r\n            requestors = songRequest.requestors;\r\n          }\r\n          })\r\n        });\r\n      })\r\n      //the next step is to either remove the songRequest from the session.songRequests array (song has been requested once) or update the numRequests of the existing songRequest\r\n      .then(() => {\r\n        //if the numRequests is 0 then the song needs to be removed\r\n        if (numRequests === 1){\r\n        //removing the song request from the songRequests array that is a copy of the songRequests in the session doc in firestore\r\n        songRequests.splice(songIndex,1);\r\n        //updating the collection to reflect the change to the songRequests\r\n        firestore.collection('songRequestSessions').doc(docID).update({\r\n          \"session.songRequests\": songRequests\r\n        })\r\n        .then(() => {\r\n            dispatch({type: 'UNDO_SONG_REQUEST'});\r\n          }).catch((error) => {\r\n            dispatch({type: 'UNDO_SONG_REQUEST_ERROR', error});\r\n          });\r\n        }\r\n        //if the numRequests is > 0 then the song has already been requested\r\n        //and we must update the doc to reflect the new request as long as the user hasn't already requested the song\r\n        else{\r\n          //updating the numRequests\r\n          songRequests[songIndex].numRequests = numRequests - 1;\r\n          //removing the requestor ID from the list of requestors\r\n          songRequests[songIndex].requestors = requestors.filter(id => id !== userID);\r\n          firestore.collection('songRequestSessions').doc(docID).update({\r\n            \"session.songRequests\": songRequests\r\n          }).then(() => {\r\n            dispatch({type: 'UNDO_SONG_REQUEST'});\r\n          }).catch((error) => {\r\n            dispatch({type: 'UNDO_SONG_REQUEST_ERROR', error});\r\n          });\r\n        }\r\n      })\r\n    .catch((error) => {\r\n      dispatch({type: 'UNDO_SONG_REQUEST_ERROR', error});\r\n    })\r\n    .catch((error) => {\r\n      dispatch({type: 'GET_DOCUMENT_ERROR', error});\r\n    })\r\n  }\r\n}\r\n\r\n//an action that will create a song request from the dashboard\r\nexport const createSongRequestFromDashboard = (songID, userID, sessionID) => {\r\n  return (dispatch, getState, {getFirebase, getFirestore}) => {\r\n    \r\n    const firestore = getFirestore();\r\n    let numRequests = 0;\r\n    let docID = null;\r\n    let songIndex = null;\r\n    let songRequests = null;\r\n\r\n    firestore.collection('songRequestSessions').where(\"session.sessionID\", \"==\", parseInt(sessionID)).get()\r\n      .then((querySnapshot) => {\r\n        querySnapshot.forEach((doc) => {\r\n          let session = doc.data().session;\r\n          docID = doc.id;\r\n          //iterating through all the songRequests in the session\r\n          songRequests = session.songRequests;\r\n          songRequests.forEach((songRequest, index) => {\r\n          if(songRequest.songID === songID){\r\n            songIndex = index; //used to identify which index in the songRequests array the song is\r\n            numRequests = songRequest.numRequests;\r\n          }\r\n          })\r\n        });\r\n      })\r\n      //the next step is to either remove the songRequest from the session.songRequests array (song has been requested once) or update the numRequests of the existing songRequest\r\n      .then(() => {\r\n        //updating the numRequests\r\n        songRequests[songIndex].numRequests = numRequests + 1;\r\n        //removing the requestor ID from the list of requestors\r\n        songRequests[songIndex].requestors.push(userID);\r\n        firestore.collection('songRequestSessions').doc(docID).update({\r\n          \"session.songRequests\": songRequests\r\n        }).then(() => {\r\n          dispatch({type: 'CREATE_SONG_REQUEST'});\r\n        }).catch((error) => {\r\n          dispatch({type: 'CREATE_SONG_REQUEST_ERROR', error});\r\n        });\r\n      })\r\n    .catch((error) => {\r\n      dispatch({type: 'CREATE_SONG_REQUEST_ERROR', error});\r\n    })\r\n    .catch((error) => {\r\n      dispatch({type: 'GET_DOCUMENT_ERROR', error});\r\n    })\r\n    \r\n  }\r\n}","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {signOut} from '../../store/actions/authActions';\r\n\r\nconst SignedInLinks = (props) => {\r\n  return (\r\n    <ul className=\"right\">\r\n      <li><NavLink to='/about'>About</NavLink></li>\r\n      <li><NavLink to='/sessions'>Sessions</NavLink></li>\r\n      <li><NavLink to='/newSR'>New Song Request</NavLink></li>\r\n      {/*eslint-disable-next-line*/}\r\n      <li><a onClick={props.signOut}>Sign Out</a></li>\r\n      <li><NavLink to='/' className='btn btn-floating grey lighten-1'>{props.profile.initials}</NavLink></li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    signOut: () => dispatch(signOut())\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(SignedInLinks)","export const signIn = (credentials) => {\r\n  return (dispatch, getState, {getFirebase}) => {\r\n    const firebase = getFirebase();\r\n\r\n    firebase.auth().signInWithEmailAndPassword(\r\n      credentials.email,\r\n      credentials.password\r\n    ).then(() => {\r\n      dispatch({type: 'SIGNIN_SUCCESS'})\r\n    }).catch((err) => {\r\n      dispatch({type: 'SIGNIN_ERROR', err})\r\n    })\r\n  }\r\n}\r\n\r\nexport const signOut = () => {\r\n  return (dispatch, getState, {getFirebase}) => {\r\n    const firebase = getFirebase();\r\n\r\n    firebase.auth().signOut().then(() => {\r\n      dispatch({type: 'SIGNOUT_SUCCESS'})\r\n    }).catch( (err) => {\r\n      dispatch({type: 'SIGNOUT_ERROR'})\r\n    })\r\n  }\r\n}\r\n\r\nexport const signUp = (newUser) => {\r\n  return (dispatch, getState, {getFirebase, getFirestore}) => {\r\n    const firebase = getFirebase();\r\n    const firestore = getFirestore();\r\n    \r\n    firebase.auth().createUserWithEmailAndPassword(\r\n      newUser.email,\r\n      newUser.password\r\n    ).then((response) => {\r\n      return firestore.collection('users').doc(response.user.uid).set({\r\n        firstName: newUser.firstName,\r\n        lastName: newUser.lastName,\r\n        initials: newUser.firstName[0] + newUser.lastName[0]\r\n      }).then(() => {\r\n        dispatch({type: 'SIGNUP_SUCCESS'})\r\n      }).catch((err) => {\r\n        dispatch({type: 'SIGNUP_ERROR', err})\r\n      })\r\n    }).catch((err) => {\r\n      dispatch({type: 'SIGNUP_ERROR', err})\r\n    })\r\n  }\r\n}","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst SignedOutLinks = () => {\r\n  return (\r\n    <ul className=\"right\">\r\n      <li><NavLink to='/about'>About</NavLink></li>\r\n      <li><NavLink to='/signin'>Sign In</NavLink></li>\r\n      <li><NavLink to='/signup'>Sign Up</NavLink></li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default SignedOutLinks","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport SignedInLinks from './SignedInLinks';\r\nimport SignedOutLinks from './SignedOutLinks';\r\nimport {connect} from 'react-redux';\r\n\r\nconst Navbar = (props) => {\r\n  const {auth, profile} = props;\r\n  const links = auth.uid ? <SignedInLinks profile={profile}/> : <SignedOutLinks/>;\r\n  return (\r\n    <nav className=\"nav-wrapper green ligthen-1\">\r\n      <div className=\"container\">\r\n          <Link to='/' className=\"brand-logo\">Play That Song</Link>\r\n          {links}\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    auth: state.firebase.auth,\r\n    profile: state.firebase.profile\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Navbar)","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst About = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"card\">\r\n        <div className=\"card-content break-line\">\r\n          <p className=\"card-title green-text\"><b>What is <i>Play That Song</i>?</b></p>\r\n          <p className=\"black-text\">\r\n            <i>Play That Song</i> is a website that allows users to create \"Song Request Sessions\"\r\n            where they can share a unique code that allows other users to add song requests to the session.\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"card\">\r\n        <div className=\"card-content about\">\r\n          <p className=\"card-title green-text\"><b>How does it work?</b></p>\r\n          <p className=\"black-text\">\r\n            Song requests are made by using the built in search functionality, integrated with the Spotify API\r\n            to return live search results.\r\n            <br/><br/>\r\n            You must <u><b><Link to='/signup' className=\"green-text\">create an account</Link></b></u> before you can use the app.\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"card\">\r\n        <div className=\"card-content about\">\r\n          <p className=\"card-title green-text\"><b>What can I do with it?</b></p>\r\n          <p className=\"black-text\">\r\n            Users are allowed to request the same song at most once and can undo requests\r\n            once they've requested a song.\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"card\">\r\n        <div className=\"card-content about\">\r\n          <p className=\"card-title green-text\"><b>How was this made?</b></p>\r\n          <p className=\"black-text\">\r\n            The code for this project can be found on <b><u><a href=\"https://github.com/ryrutherford/play-that-song\" className=\"green-text\">Github</a></u></b>.\r\n            <br/><br/>\r\n            The website was built using <b>ReactJS</b> with <b>Redux</b> as the central state manager, <b>Firebase</b> as the host, authentication manager, and cloud function manager, and <b>Firestore</b> as the database.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About","import React from 'react'\r\n\r\nconst SongDetails = (props) => {\r\n  const id = props.match.params.id;\r\n  return (\r\n    <div className=\"container section sr-details\">\r\n      <div className=\"card z-depth-0\">\r\n        <div className=\"card-content\">\r\n          <span className=\"card-title\">Song Title - {id}</span>\r\n          <p>Artist</p>\r\n        </div>\r\n        <div className=\"card-action green-text lighten-4\">\r\n          <div>Ext Info</div>\r\n          <div>Ext Info2</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SongDetails\r\n","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {signIn} from '../../store/actions/authActions'\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nclass SignIn extends Component {\r\n\r\n  state = {\r\n    email: '',\r\n    password: ''\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.signIn(this.state)\r\n  }\r\n  render() {\r\n    const {authError, auth} = this.props;\r\n    if(auth.uid) return <Redirect to=\"/\"/>\r\n    return (\r\n      <div className=\"container\">\r\n        <form onSubmit={this.handleSubmit} className=\"white\">\r\n          <h5 className=\"black-text text-darken-3\">Sign In</h5>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"email\" className=\"green-text\">Email</label>\r\n            <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"password\" className=\"green-text\">Password</label>\r\n            <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <button className=\"btn green lighten-1 z-depth-0\">Sign In</button>\r\n            <div className=\"red-text center\">\r\n              {authError ? <p>{authError}</p> : null}\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    authError: state.auth.authError,\r\n    auth: state.firebase.auth\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    signIn: (credentials) => dispatch(signIn(credentials)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn)\r\n","import React, { Component } from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {signUp} from '../../store/actions/authActions';\r\n\r\nclass SignUp extends Component {\r\n  state = {\r\n    email: '',\r\n    password: '',\r\n    firstName: '',\r\n    lastName: ''\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.signUp(this.state);    \r\n  }\r\n  render() {\r\n    const {auth, authError} = this.props;\r\n    if(auth.uid) return <Redirect to=\"/\"/>\r\n    return (\r\n      <div className=\"container\">\r\n        <form onSubmit={this.handleSubmit} className=\"white\">\r\n          <h5 className=\"black-text text-darken-3\">Sign Up</h5>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"email\" className=\"green-text\">Email</label>\r\n            <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"password\" className=\"green-text\">Password</label>\r\n            <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"firstName\" className=\"green-text\">First Name</label>\r\n            <input type=\"text\" id=\"firstName\" onChange={this.handleChange}/>\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"lastName\" className=\"green-text\">Last Name</label>\r\n            <input type=\"text\" id=\"lastName\" onChange={this.handleChange}/>\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <button className=\"btn green lighten-1 z-depth-0\">Sign Up</button>\r\n            <div className=\"red-text center\">\r\n              {authError ? <p>{authError}</p> : null}\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    auth: state.firebase.auth,\r\n    authError: state.auth.authError\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    signUp: (newUser) => dispatch(signUp(newUser)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp)\r\n","import React from 'react';\r\nimport moment from 'moment';\r\n\r\nconst Notifications = (props) => {\r\n  const {notifications} = props;\r\n  return (\r\n    <div className=\"section\">\r\n      <h3 className=\"green-text\">Notifications</h3>\r\n      <div className=\"card\">\r\n        <div className=\"card-content\">\r\n          \r\n          <ul>\r\n            {notifications && notifications.map((item) => {\r\n              return (\r\n                <li key={item.id}>\r\n                  <span className=\"green-text notifications\">\r\n                    <b>{item.title + \" • \" + item.artists.replace(\",\", \", \")}</b>\r\n                    {\" was requested \" + moment(item.time.toDate()).fromNow()}\r\n                  </span>\r\n                  <hr/>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n          <span className=\"black-text notifications\"><i>{notifications !== [] ? null : \"No new notifications\"}</i></span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Notifications","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {firestoreConnect, isLoaded} from 'react-redux-firebase';\r\nimport {compose} from 'redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport Notifications from '../dashboard/Notifications';\r\nimport {createSession, deleteSession} from '../../store/actions/sessionActions';\r\n\r\nclass Sessions extends Component {\r\n  state = {\r\n    joinSessionError: null,\r\n    path: null\r\n  }\r\n  \r\n  //returns the signed in users active sessions\r\n  getSessions = () => {\r\n    const {songRequestSessions, auth} = this.props;\r\n    let sessionArr = [];\r\n    if(isLoaded(songRequestSessions)){\r\n      for(let i in songRequestSessions){\r\n        if(songRequestSessions[i] !== null){\r\n          if(songRequestSessions[i].creatorID === auth.uid){\r\n            sessionArr.push(songRequestSessions[i].session)\r\n          }\r\n        }\r\n      }\r\n      return sessionArr;\r\n    }\r\n  }\r\n\r\n  //function that initiates the joining of a session\r\n  joinSession = (e) => {\r\n    const {songRequestSessions} = this.props;\r\n    e.preventDefault();\r\n    let sessionID = e.target.elements[0].value;\r\n    if(isLoaded(songRequestSessions)){\r\n      let sessionExists = false;\r\n      for(let i in songRequestSessions){\r\n        if(songRequestSessions[i].session.sessionID === parseInt(sessionID, 10)){\r\n          sessionExists = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      //if the session was found in songRequestSessions then we will redirect the user to that session\r\n      if(sessionExists){\r\n        let path = \"/activeSession/\" + sessionID;\r\n        this.setState({path});\r\n      }\r\n      else{\r\n        this.setState({\r\n          joinSessionError: 'The code you entered did not match an active session. Please try again'\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  //function that creates a new session\r\n  newSession = () => {\r\n    const {songRequestSessions, createSession} = this.props;\r\n    if(isLoaded(songRequestSessions)){\r\n      //the random sessionID will be the new session's identifier code\r\n      let sessionID = Math.floor(100000 + Math.random() * 900000);\r\n\r\n      //songRequestSessions is an array of sessions retrieved from firestore, it will be undefined initially\r\n      let tryAgain = false;\r\n      for(let i in songRequestSessions){\r\n        if(songRequestSessions[i].session.sessionID === sessionID){\r\n          tryAgain = true;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      //if the songRequestSessionIDs array is non empty then the sessionID already exists so we must try again\r\n      while(tryAgain){\r\n        sessionID = Math.floor(100000 + Math.random() * 900000);\r\n        for(let i in songRequestSessions){\r\n          if(songRequestSessions[i].session.sessionID === sessionID){\r\n            tryAgain = true;\r\n          }\r\n          else{\r\n            tryAgain = false;\r\n          }\r\n        }\r\n      }\r\n      createSession(this.props.auth.uid, sessionID);\r\n    }\r\n  }\r\n\r\n  //code for deleting a session, updates the database and removes the session from firestore\r\n  deleteSession = (e) => {\r\n    e.preventDefault()\r\n    const sessionID = e.target.id;\r\n    this.props.deleteSession(sessionID);\r\n  }\r\n\r\n  render(){\r\n    const {auth, notifications} = this.props;\r\n    if(!auth.uid) {\r\n      return <Redirect to='/about'/>;\r\n    }\r\n    if(this.state.path){\r\n      return <Redirect to={this.state.path}/>;\r\n    }\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col s12 m6\">\r\n            <div className=\"section\">\r\n              <h3 className=\"green-text\">Sessions</h3>\r\n              <div className=\"card\">\r\n                <div className=\"card-content\">\r\n                  <div className=\"session center\">\r\n                    <button onClick={this.newSession} className=\"btn green lighten-1 z-depth-0 \">New Session</button>\r\n                    <br/>\r\n                    <form onSubmit={this.joinSession} className=\"white\">\r\n                      <div className=\"input-field green-text\">\r\n                        <input type=\"number\" id=\"sessionID\" placeholder=\"Enter Session ID (6 digit code)\"/>\r\n                        <button className=\"btn green lighten-1 z-depth-0\">Join Session</button>\r\n                      </div>\r\n                    </form>\r\n                    {this.state.joinSessionError ? <p className=\"red-text\">{this.state.joinSessionError}</p> : null}\r\n                  </div>\r\n                  <h5 className=\"black-text text-darken-3\">Active Sessions</h5>\r\n                  {\r\n                    this.getSessions() && this.getSessions().length !== 0 ? (this.getSessions().map((session) => {\r\n                      return(\r\n                        <div key={session.sessionID}>\r\n                          <span className=\"green-text card-title\"><a href={\"https://play-that-song-fac18.firebaseapp.com/activeSession/\" + session.sessionID}>Session ID: {session.sessionID}</a></span>\r\n                          <button className=\"btn green lighten-1 z-depth-0\" id={session.sessionID} onClick={this.deleteSession}>Delete Session</button>\r\n                          <hr/>\r\n                        </div>\r\n                      )\r\n                    })) : (<p>You don't have any active sessions</p>)\r\n                  }\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col s12 m5 offset-m1\">\r\n            <Notifications notifications={notifications}/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    auth: state.firebase.auth,\r\n    notifications: state.firestore.ordered.notifications,\r\n    songRequestSessions: state.firestore.data.songRequestSessions\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    createSession: (userID, sessionID) => {\r\n      dispatch(createSession(userID, sessionID));\r\n    },\r\n    deleteSession: (sessionID) => {\r\n      dispatch(deleteSession(sessionID));\r\n    }\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  firestoreConnect([\r\n    {collection: 'notifications', limit: 10, orderBy: ['time', 'desc']},\r\n    {collection: 'songRequestSessions'}\r\n  ])\r\n)(Sessions)","export const createSession = (userID, sessionID) => {\r\n  return (dispatch, getState, {getFirestore}) => {\r\n    const firestore = getFirestore();\r\n    firestore.collection('songRequestSessions').add({\r\n      creatorID: userID,\r\n      session: {\r\n        sessionID: sessionID,\r\n        songRequests: []\r\n      }\r\n    })\r\n    .then(() => {\r\n      dispatch({type: \"SESSION_CREATED\"});\r\n    })\r\n    .catch((error) => {\r\n      dispatch({type:\"SESSION_CREATED_ERROR\", error});\r\n    })\r\n  }\r\n}\r\n\r\n//action for deleting the session\r\nexport const deleteSession = (sessionID) => {\r\n  return (dispatch, getState, {getFirestore}) => {\r\n    const firestore = getFirestore();\r\n    sessionID = parseInt(sessionID, 10);\r\n    firestore.collection('songRequestSessions').where(\"session.sessionID\", \"==\", sessionID).get()\r\n      .then((querySnapshot) => {\r\n        querySnapshot.forEach((doc) => {\r\n          firestore.collection('songRequestSessions').doc(doc.id).delete().then(() => {\r\n            dispatch({type:'DELETE_SESSION'});\r\n          }).catch((error) => {\r\n            dispatch({type:'DELETE_SESSION_ERROR', error});\r\n          })\r\n        })\r\n      })\r\n      .catch((error) => {\r\n        dispatch({type:'DELETE_SESSION_ERROR', error});\r\n      })\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {undoRequest, createSongRequestFromDashboard, deleteNotifications} from '../../store/actions/songActions';\r\n\r\nclass SongRequestSummary extends Component {\r\n  handleClickUndo = (e) => {\r\n    e.preventDefault();\r\n    this.props.undoRequest(e.target.id, this.props.auth.uid, this.props.sessionID); //first param is the songID, second is the user id\r\n  }\r\n  handleClickRequest = (e) => {\r\n    e.preventDefault();\r\n    this.props.createSongRequestFromDashboard(e.target.id, this.props.auth.uid, this.props.sessionID);\r\n    this.props.deleteNotifications();\r\n  }\r\n  render(){\r\n    const {auth, song} = this.props;\r\n    return (\r\n      <div className=\"song-with-album card\" id={song.id} key={song.id}>\r\n      <img src={song.albumIMGURL} alt=\"Album Cover\"/>\r\n      <div className=\"card-content\">\r\n        <span className=\"card-title green-text\">\r\n        <a target=\"_blank\" rel=\"noreferrer noopener\" title=\"Play on Spotify\" href={song.externalURL} className=\"green-text\">{song.title}</a>\r\n        </span>\r\n        <p className=\"black-text\">{\"Song • \" + song.artists.join(\", \")}</p>\r\n        <p className=\"black-text\">\r\n          <b>{song.numRequests === 1 ? (song.numRequests + \" Request\") : (song.numRequests + \" Requests\")}</b>\r\n        </p>\r\n        {song.requestors.includes(auth.uid) ? (\r\n            <button onClick={this.handleClickUndo} id={song.songID} className=\"btn green lighten-1 z-depth-0\">Undo Request</button>\r\n          ) : (\r\n            <button onClick={this.handleClickRequest} id={song.songID} className=\"btn green lighten-1 z-depth-0\">Request Song</button> \r\n          )\r\n        }\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    auth: state.firebase.auth,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    createSongRequestFromDashboard: (songID, userID, sessionID) => {\r\n      dispatch(createSongRequestFromDashboard(songID, userID, sessionID));\r\n    },\r\n    undoRequest: (songID, userID, sessionID) => {\r\n      dispatch(undoRequest(songID, userID, sessionID))\r\n    },\r\n    deleteNotifications: () => {\r\n      dispatch(deleteNotifications());\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SongRequestSummary)","import React from 'react';\r\nimport SongRequestSummary from './SongRequestSummary';\r\nconst SongRequestList = ({songs, sessionID}) => {\r\n  return (\r\n    <div className=\"sr-list section\">\r\n      <h3 className=\"card-title green-text\">Song Requests</h3>\r\n        {songs ? songs.slice().sort(function(a, b){return b.numRequests - a.numRequests}).map(song => {\r\n          return (\r\n            <SongRequestSummary sessionID={sessionID} song={song} key={sessionID}/>\r\n          );\r\n        }) : (\r\n          <h6 className=\"black-text\"><i>No song requests</i></h6>\r\n        )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SongRequestList","import React, {Component} from 'react';\r\nimport Notifications from '../dashboard//Notifications';\r\nimport SongRequestList from '../songRequests/SongRequestList';\r\nimport {connect} from 'react-redux';\r\nimport {firestoreConnect, isLoaded} from 'react-redux-firebase';\r\nimport {compose} from 'redux';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nclass ActiveSession extends Component {\r\n\r\n  //this function checks whether the url entered (i.e. access code) exists or not\r\n  //if it doesn't exist, the user is redirected to the sessions page\r\n  isValidURL = () => {\r\n    const {songRequestSessions, sessionID} = this.props;\r\n    let sessionExists = false;\r\n    if(isLoaded(songRequestSessions)){\r\n      for(let i in songRequestSessions){\r\n        if(songRequestSessions[i].session.sessionID === parseInt(sessionID)){\r\n          sessionExists = true;\r\n          break;\r\n        }\r\n      }\r\n      if(!sessionExists){\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  returnSongRequests = () => {\r\n    const {songRequestSessions, sessionID} = this.props;\r\n    if(isLoaded(songRequestSessions)){\r\n      let songRequests = [];\r\n      for(let i in songRequestSessions){\r\n        if(songRequestSessions[i].session.sessionID === parseInt(sessionID)){\r\n          songRequests = songRequestSessions[i].session.songRequests;\r\n          break;\r\n        }\r\n      }\r\n      return songRequests;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {auth, notifications, sessionID, songRequestSessions} = this.props;\r\n    if(!auth.uid) {\r\n      return <Redirect to='/about'/>\r\n    }\r\n    if(isLoaded(songRequestSessions) && this.isValidURL() === false){\r\n      return <Redirect to='/sessions'/>\r\n    }\r\n    if(isLoaded(songRequestSessions))\r\n      return (\r\n        <div>\r\n          <div className=\"container\">\r\n            <div className=\"card\">\r\n              <div className=\"card-content break-line\">\r\n                <p className=\"card-title green-text center\"><b>Session {sessionID}</b></p>\r\n                <p className=\"black-text center\">Share this code <b>{sessionID}</b> or this link <a href={\"https://play-that-song-fac18.firebaseapp.com/activeSession/\" + sessionID}>{\"https://play-that-song-fac18.firebaseapp.com/activeSession/\" + sessionID}</a> with people to allow them to make requests</p>\r\n                <br/>\r\n                <p className=\"black-text center\">Navigate to <a href={\"https://play-that-song-fac18.firebaseapp.com/activeSession/\" + sessionID}>{\"https://play-that-song-fac18.firebaseapp.com/activeSession/\" + sessionID}</a> to start requesting songs or go to <a href=\"https://play-that-song-fac18.firebaseapp.com/sessions\">https://play-that-song-fac18.firebaseapp.com/sessions</a> to check out your other active sessions</p>\r\n                <div className=\"srButton\">\r\n                  <button onClick={() => this.props.history.push(\"/activeSession/\" + sessionID + \"/createSR\")} className=\"btn green center lighten-1 z-depth-0\">Create Song Request</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col s12 m6\">\r\n                <SongRequestList sessionID={this.props.sessionID} songs={this.returnSongRequests()}/>\r\n              </div>\r\n              <div className=\"col s12 m5 offset-m1\">\r\n                <Notifications notifications={notifications}/>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n      else {\r\n        return (\r\n          <center>\r\n            <div className=\"preloader-wrapper big active\">\r\n              <div className=\"spinner-layer spinner-green-only\">\r\n                <div className=\"circle-clipper left\">\r\n                  <div className=\"circle\"></div>\r\n                </div><div className=\"gap-patch\">\r\n                  <div className=\"circle\"></div>\r\n                </div><div className=\"circle-clipper right\">\r\n                  <div className=\"circle\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </center>\r\n        )\r\n      }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  let sessionID = ownProps.match.params.session_id;\r\n  return {\r\n    //songs: state.firestore.ordered.songRequestSessions,\r\n    auth: state.firebase.auth,\r\n    notifications: state.firestore.ordered.notifications,\r\n    songRequestSessions: state.firestore.data.songRequestSessions,\r\n    sessionID\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps),\r\n  firestoreConnect([\r\n    {collection: 'notifications', limit: 10, orderBy: ['time', 'desc']},\r\n    {collection: 'songRequestSessions'}\r\n  ])\r\n)(ActiveSession)","import React, { Component } from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport Navbar from './components/layout/Navbar';\nimport About from './components/dashboard/About';\nimport SongDetails from './components/songRequests/SongDetails';\nimport SignIn from './components/auth/SignIn';\nimport SignUp from './components/auth/SignUp';\nimport RequestSong from './components/songRequests/RequestSong';\nimport Sessions from './components/sessions/Sessions';\nimport ActiveSession from './components/sessions/ActiveSession';\n\nclass App extends Component {\n\n  render (){\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar/>\n          <Switch>\n            <Route exact path=\"/\" component={Sessions}></Route>\n            <Route path=\"/about\" component={About}></Route>\n            <Route path=\"/song/:id\" component={SongDetails}></Route>\n            <Route path=\"/signin\" component={SignIn}></Route>\n            <Route path=\"/signup\" component={SignUp}></Route>\n            <Route path=\"/sessions\" component={Sessions}></Route>\n            <Route exact path=\"/activeSession/:session_id\" component={ActiveSession}></Route>\n            <Route path=\"/activeSession/:session_id/createSR\" component={RequestSong}></Route>\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\r\n  authError: null\r\n};\r\n\r\nconst authReducer = (state = initState, action) => {\r\n  switch(action.type){\r\n    case 'SIGNIN_ERROR':\r\n      return {\r\n        ...state,\r\n        authError: 'Sign In Failed - Email or Password Incorrect'\r\n      };\r\n    case 'SIGNIN_SUCCESS':\r\n      return {\r\n        ...state,\r\n        authError: null\r\n      }\r\n    case 'SIGNOUT_SUCCESS':\r\n      return state;\r\n    case 'SIGNOUT_ERROR':\r\n      return state;\r\n    case 'SIGNUP_SUCCESS':\r\n      return {\r\n        ...state,\r\n        authError: null\r\n      }\r\n    case 'SIGNUP_ERROR':\r\n      return {\r\n        ...state,\r\n        authError: action.err.message\r\n      }\r\n    case \"CLEAR_ERROR\":\r\n      return {\r\n        ...state,\r\n        authError: null\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default authReducer","const initState = {\r\n  reqError: null\r\n};\r\n\r\nconst songReducer = (state = initState, action) => {\r\n  switch(action.type){\r\n    case 'CREATE_SONG_REQUEST':\r\n      return state;\r\n    case 'CREATE_SONG_REQUEST_ERROR':\r\n      return {\r\n        ...state,\r\n        reqError: action.err\r\n      };\r\n    case 'UPDATE_SONG_REQUEST':\r\n      return state;\r\n    case 'UPDATE_SONG_REQUEST_ERROR':\r\n      return {\r\n        ...state,\r\n        reqError: action.err\r\n      };\r\n    case 'ALREADY_REQUESTED':\r\n      return {\r\n        ...state,\r\n        reqError: action.err\r\n      };\r\n    case 'SONG_REQUEST_ERROR':\r\n      return {\r\n        ...state,\r\n        reqError: action.err\r\n      };\r\n    case 'GET_DOCUMENT_ERROR':\r\n      return {\r\n        ...state,\r\n        reqError: action.err\r\n      };\r\n    case 'CLEAR_ERROR':\r\n      return {\r\n        ...state,\r\n        reqError: null\r\n      }\r\n    case 'UNDO_SONG_REQUEST':\r\n      return state;\r\n    case 'UNDO_SONG_REQUEST_ERROR':\r\n      return {\r\n        ...state,\r\n        reqError: action.err\r\n      }\r\n    case 'DELETE_NOTIF':\r\n      return state;\r\n    case 'DELETE_NOTIF_ERROR':\r\n      return {\r\n        ...state,\r\n        reqError: action.err\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default songReducer","const initState = {\r\n  sessError: null,\r\n  sessionIDs: []\r\n}\r\nconst sessionReducer = (state = initState, action) => {\r\n  switch(action.type){\r\n    case 'SESSION_CREATED':\r\n      return state;\r\n    case 'SESSION_CREATED_ERROR':\r\n      return {\r\n        ...state,\r\n        sessError: action.error\r\n      }\r\n    case 'DELETE_SESSION':\r\n      return state;\r\n    case 'DELETE_SESSION_ERROR':\r\n      return {\r\n        ...state,\r\n        sessError: action.error\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default sessionReducer;","import authReducer from './authReducer';\r\nimport songReducer from './songReducer';\r\nimport sessionReducer from './sessionReducer';\r\nimport {combineReducers} from 'redux';\r\nimport {firestoreReducer} from 'redux-firestore';\r\nimport {firebaseReducer} from 'react-redux-firebase';\r\n\r\nconst rootReducer = combineReducers({\r\n  auth: authReducer,\r\n  song: songReducer,\r\n  session: sessionReducer,\r\n  firestore: firestoreReducer,\r\n  firebase: firebaseReducer\r\n});\r\n\r\nexport default rootReducer","  import firebase from 'firebase/app';\r\n  import 'firebase/firestore';\r\n  import 'firebase/auth';\r\n  import 'firebase/analytics';\r\n  \r\n  // Your web app's Firebase configuration\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyCiS_fQpcw_1JGpyXgdcb-f7n3U8fOCz2M\",\r\n    authDomain: \"play-that-song-fac18.firebaseapp.com\",\r\n    databaseURL: \"https://play-that-song-fac18.firebaseio.com\",\r\n    projectId: \"play-that-song-fac18\",\r\n    storageBucket: \"play-that-song-fac18.appspot.com\",\r\n    messagingSenderId: \"843690786024\",\r\n    appId: \"1:843690786024:web:dbf48faf223b36c2c39d5d\",\r\n    measurementId: \"G-6092ZKX3KV\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  firebase.analytics();\r\n  firebase.firestore();\r\n\r\n  export default firebase;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport rootReducer from './store/reducers/rootReducer'\nimport { Provider, useSelector } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport { createFirestoreInstance, getFirestore, reduxFirestore } from 'redux-firestore'\nimport { ReactReduxFirebaseProvider, getFirebase, isLoaded } from 'react-redux-firebase'\nimport fbConfig from './config/fbConfig'\nimport firebase from 'firebase/app'\n\nconst store = createStore(\n    rootReducer,\n    compose(\n        applyMiddleware(thunk.withExtraArgument({ getFirestore, getFirebase })),\n        reduxFirestore(firebase, fbConfig)\n    )\n);\n\nconst profileSpecificProps = {\n  userProfile: 'users',\n  useFirestoreForProfile: true,\n  enableRedirectHandling: false,\n  resetBeforeLogin: false\n}\n\nconst rrfProps = {\n  firebase,\n  config: fbConfig,\n  // eslint-disable-next-line\n  config: profileSpecificProps,\n  dispatch: store.dispatch,\n  createFirestoreInstance,\n  userProfile: 'users', // where profiles are stored in database\n  presence: 'presence', // where list of online users is stored in database\n  sessions: 'sessions'\n}\n\nfunction AuthIsLoaded({ children }) {\n  const auth = useSelector(state => state.firebase.auth)\n  if (!isLoaded(auth)) return (\n    <center>\n      <div className=\"preloader-wrapper big active\">\n        <div className=\"spinner-layer spinner-green-only\">\n          <div className=\"circle-clipper left\">\n            <div className=\"circle\"></div>\n          </div><div className=\"gap-patch\">\n            <div className=\"circle\"></div>\n          </div><div className=\"circle-clipper right\">\n            <div className=\"circle\"></div>\n          </div>\n        </div>\n      </div>\n    </center>\n  );\n    return children\n}\n\nReactDOM.render(\n<Provider store={store}>\n  <ReactReduxFirebaseProvider {...rrfProps}> \n    <AuthIsLoaded>\n      <App />\n    </AuthIsLoaded>\n  </ReactReduxFirebaseProvider>\n</Provider>,\ndocument.getElementById('root')\n);\n\nserviceWorker.unregister(); "],"sourceRoot":""}